#ifndef _L2_HPP
#define _L2_HPP

#include "Loss.hpp"
#include <unsupported/Eigen/CXX11/Tensor>

namespace loss
{
    /** Basic interface for a loss function
     * 
     * @tparam T Scalar type for evaluating the loss function
     */
    template<typename T>
    class L2 : public Loss<T>
    {
        public:
        /** Evaluates the L1 loss gradient.
         * 
         * Returns the partial gradient of the loss with respect
         * to each predicted value. The net loss is stored in the 
         * given `loss` parameter.
         * 
         * @param predicted Data generated by a model
         * @param actual Ground truth data
         * @param loss Optional reference to variable that net loss will be stored in
        */
        template<typename X>
        static X grad(X& predicted, X& actual, T& loss)
        {
            X diff = (predicted - actual);
            loss = Loss<T>::make_array(diff).abs().sum();
            return diff * T(2);
        }
    };
}

#endif