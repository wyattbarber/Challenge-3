#ifndef _BCE_HPP
#define _BCE_HPP

#include "Loss.hpp"
#include <cmath>

namespace loss
{
    /** Basic interface for a loss function
     * 
     * @tparam T Scalar type for evaluating the loss function
     */
    template<typename T>
    class BCE : public Loss<T>
    {
        public:
        /** Evaluates the binary cross entropy loss gradient
         * 
         * Calculates the intersection over union loss. Each index in the 
         * actual value is expected to be a 0 or 1 value.
         * 
         * @param predicted Data generated by a model
         * @param actual Ground truth data
         * @param loss Optional reference to variable that net loss will be stored in
        */       
        Eigen::Vector<T, Eigen::Dynamic> grad(Eigen::Vector<T, Eigen::Dynamic>& predicted, Eigen::Vector<T, Eigen::Dynamic>& actual, T& loss) 
        { 
            auto ma = Eigen::Vector<T, Eigen::Dynamic>::Ones(actual.size()) - actual;
            auto mp = Eigen::Vector<T, Eigen::Dynamic>::Ones(predicted.size()) - predicted;
            loss = -((actual.array() * eps(predicted).array().log()) + (ma.array() * eps(mp).array().log())).sum() / actual.size();
            return (predicted - actual).cwiseQuotient(eps(predicted.cwiseProduct(mp)));
        };

        Eigen::Tensor<T, 3> grad(Eigen::Tensor<T, 3>& predicted, Eigen::Tensor<T, 3>& actual, T& loss) 
        { 
            auto ma = actual.unaryExpr([](T x){ return T(1) - x; });
            auto mp = predicted.unaryExpr([](T x){ return T(1) - x; });
            Eigen::Tensor<T,0> s = -((actual * eps(predicted).log()) + (ma * eps(mp).log())).sum();
            loss = s(0) / actual.size();
            return (predicted - actual) / eps(predicted * mp);
        };

        /** Adds an epsilon to data to prevent divide-by-zero 
         * 
        */
        template<typename X>
        static auto eps(X& x)
        { 
            return x.unaryExpr([](T x){ 
                return x + ((x < T(0)) ? -Eigen::NumTraits<T>::epsilon() : Eigen::NumTraits<T>::epsilon()); 
                } );
        }

    };
}

#endif